version: '3.8'

services:
  chatwoot-pipedrive:
    # Usando Node.js 18 com Alpine
    image: node:18-alpine
    
    command: |
      sh -c 'echo "Instalando dependências do sistema..." && \
      apk add --no-cache \
        ffmpeg \
        ffmpeg-libs \
        git \
        python3 \
        make \
        g++ \
        cairo-dev \
        jpeg-dev \
        pango-dev \
        giflib-dev \
        pkgconfig \
        pango \
        pkgconf \
        pixman-dev \
        cairo \
        cairo-tools \
        && \
      mkdir -p /app/logs /app/temp /app/data && \
      chmod -R 777 /app/logs /app/temp /app/data && \
      cd /app && \
      echo "Preparando o código..." && \
      if [ -d /app/.git ]; then \
        echo "Atualizando repositório existente" && \
        git pull; \
      else \
        echo "Clonando novo repositório" && \
        find /app -mindepth 1 -maxdepth 1 ! -name logs ! -name temp ! -name data -exec rm -rf {} \; && \
        git clone https://github.com/Nilmarsilva/chatwoot-pipedrive.git /tmp/repo && \
        cp -r /tmp/repo/. /app/ && \
        rm -rf /tmp/repo; \
      fi && \
      echo "Instalando dependências do Node.js..." && \
      npm install --omit=dev --no-audit --no-fund && \
      npm install cors express dotenv && \
      chmod +x /app/start.sh && \
      echo "Executando script de inicialização..." && \
      /app/start.sh'
    
    # Configurações de rede
    networks:
      - network_public
    
    # Configurações de volumes
    volumes:
      - chatwoot_pipedrive_app_data:/app
      - chatwoot_pipedrive_logs_data:/app/logs
      - chatwoot_pipedrive_temp_data:/app/temp
    
    # Configurações de ambiente
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=1024
      - PORT=3000
      - CHATWOOT_API_TOKEN=${CHATWOOT_API_TOKEN}
      - CHATWOOT_BASE_URL=${CHATWOOT_BASE_URL}
      - PIPEDRIVE_API_TOKEN=${PIPEDRIVE_API_TOKEN}
      - PIPEDRIVE_BASE_URL=${PIPEDRIVE_BASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    
    # Configurações de healthcheck (temporariamente desativado para debug)
    # healthcheck:
    #   test: ["CMD", "wget", "--spider", "http://localhost:3000/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 60s
    
    # Configurações de deploy para o Docker Swarm
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '1.0'
          memory: 1.5G
        reservations:
          memory: 512M
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.chatwoot-pipedrive.rule=Host(`webhookdata.authbrasil.app.br`)"
        - "traefik.http.routers.chatwoot-pipedrive.entrypoints=websecure"
        - "traefik.http.routers.chatwoot-pipedrive.tls.certresolver=letsencryptresolver"
        - "traefik.http.services.chatwoot-pipedrive.loadbalancer.server.port=3000"
        - "traefik.docker.network=network_public"

# Redes
networks:
  network_public:
    external: true

# Volumes para persistência de dados
volumes:
  chatwoot_pipedrive_logs_data:
    name: chatwoot_pipedrive_logs_data
    driver: local
  chatwoot_pipedrive_temp_data:
    name: chatwoot_pipedrive_temp_data
    driver: local
  chatwoot_pipedrive_app_data:
    name: chatwoot_pipedrive_app_data
    driver: local