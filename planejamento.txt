# PLANEJAMENTO DE REFATORAÇÃO - INTEGRAÇÃO CHATWOOT-PIPEDRIVE

## HISTÓRICO DE MODIFICAÇÕES REALIZADAS

### Refatoração Completa (26/06/2025)
- Modularização completa do código
- Extração de serviços para messageService, fileService, audioService e dealService
- Criação de clientes de API para Chatwoot e Pipedrive
- Implementação de rotas separadas para webhook
- Simplificação do arquivo principal

### Anexação de Arquivos
- Ajustada a lógica de anexação para garantir que os arquivos sejam anexados com seus nomes e extensões corretas
- Expandida a lista de tipos de arquivo suportados incluindo:
  - Documentos: pdf, doc, docx, txt, rtf, odt, md, pages
  - Planilhas: xlsx, xls, csv, ods, numbers
  - Apresentações: ppt, pptx, odp, key
  - Imagens: jpeg, jpg, png, gif, bmp, webp, svg, tiff, tif, heic, heif
  - Compactados: zip, rar, 7z, tar, gz, bz2
  - Outros: json, xml, sql, log
- Melhorada a extração de extensões e nomes de arquivos

### 1. Estrutura de Diretórios Implementada
```
src/
├── index.js                 # Arquivo principal (simplificado) 
├── config/                  # Configurações
│   └── config.js            # Configurações gerais 
├── api/                     # Clientes de API
│   ├── chatwoot.js          # Cliente para API do Chatwoot 
│   └── pipedrive.js         # Cliente para API do Pipedrive 
├── services/                # Serviços de negócio
│   ├── messageService.js    # Processamento de mensagens 
│   ├── fileService.js       # Processamento de arquivos 
│   ├── audioService.js      # Processamento de áudio 
│   └── dealService.js       # Gerenciamento de deals 
├── utils/                   # Utilitários
│   ├── formatters.js        # Formatadores (datas, textos) 
│   └── fileUtils.js         # Utilitários para arquivos 
└── routes/                  # Rotas da API
    └── webhook.js           # Rota do webhook 
```

### 2. Funções implementadas em cada módulo

#### api/chatwoot.js 
- `getChatwootMessages`: Busca mensagens do Chatwoot com paginação 
- `updateChatwootContact`: Atualiza contato no Chatwoot com ID do Deal 
- `getChatwootConversation`: Busca detalhes de uma conversa no Chatwoot 

#### api/pipedrive.js 
- `createDeal`: Cria Deal no Pipedrive 
- `createPerson`: Cria Pessoa no Pipedrive 
- `findOrganization`: Busca Organização no Pipedrive 
- `createOrganization`: Cria Organização no Pipedrive 
- `updateDealRelations`: Atualiza Deal com relações 
- `createPipedriveNote`: Cria nota no Pipedrive 
- `attachFileToDeal`: Anexa arquivo ao Deal no Pipedrive 

#### services/messageService.js 
- `filterMessages`: Filtra e organiza mensagens por tipo 
- `extractContactData`: Extrai dados do contato 
- `formatNotaTexto`: Formata mensagens para nota do Pipedrive 
- `combineMessages`: Combina mensagens de diferentes tipos em uma única lista 

#### services/fileService.js 
- `downloadFile`: Baixa arquivo de URL 
- `processImages`: Processa imagens 
- `processFiles`: Processa arquivos 
- `saveBufferToTempFile`: Salva buffer em arquivo temporário 

#### services/audioService.js 
- `saveBufferToTempFile`: Converte buffer de áudio para arquivo temporário 
- `convertAudioToMp3`: Converte áudio para formato mp3 
- `transcribeAudio`: Transcreve áudio usando a API da OpenAI 
- `processAudios`: Processa áudios com transcrição 

#### services/dealService.js 
- `createFullDeal`: Cria Deal completo com relações e anexos 
- `processWebhook`: Processa webhook e cria Deal 

#### routes/webhook.js 
- Rota POST para receber webhook do Chatwoot 

#### index.js 
- Inicialização do servidor e registro de rotas 
### 3. Plano de Implementação

#### Fase 1: Preparação ✅
1. Criar a estrutura de diretórios ✅
2. Configurar os arquivos base com as importações necessárias ✅
3. Criar o arquivo de configuração central ✅

#### Fase 2: Extração de Módulos ✅
1. Extrair funções utilitárias (formatters.js, fileUtils.js) ✅
2. Extrair clientes de API (chatwoot.js, pipedrive.js) ✅
3. Extrair serviços de negócio (messageService.js, fileService.js, audioService.js, dealService.js) ✅

#### Fase 3: Refatoração do Webhook ✅
1. Dividir o grande handler do webhook em funções menores ✅
2. Criar o arquivo de rotas webhook.js ✅
3. Integrar com os módulos criados ✅

#### Fase 4: Simplificação do Arquivo Principal ✅
1. Atualizar index.js para usar a nova estrutura ✅
2. Remover código duplicado ✅
3. Garantir que todas as dependências estejam corretamente importadas ✅

#### Fase 5: Testes e Validação
1. Testar cada módulo isoladamente
2. Testar a integração completa
3. Verificar se todas as funcionalidades originais estão preservadas

### 4. Benefícios Alcançados

1. **Manutenibilidade**: Código mais fácil de manter e entender ✅
2. **Testabilidade**: Funções isoladas são mais fáceis de testar ✅
3. **Escalabilidade**: Facilita adicionar novas funcionalidades ✅
4. **Colaboração**: Diferentes desenvolvedores podem trabalhar em diferentes módulos ✅
5. **Reutilização**: Funções podem ser reutilizadas em outros contextos ✅

### 5. Considerações para Implantação em Docker Swarm

- Garantir que a nova estrutura seja compatível com a implantação via Docker Swarm ✅
- Manter a configuração via variáveis de ambiente ✅
- Preservar os volumes nomeados para persistência de dados ✅
- Manter a compatibilidade com o domínio webhookdata.authbrasil.app.br ✅

### 6. Próximos Passos

1. **Testes Automatizados**
   - Implementar testes unitários para cada módulo
   - Implementar testes de integração para fluxos completos
   - Configurar CI/CD para execução automática de testes

2. **Documentação**
   - Adicionar documentação detalhada para cada módulo
   - Criar diagrama de fluxo da aplicação
   - Documentar processo de instalação e configuração

3. **Melhorias Futuras**
   - Implementar sistema de filas para processamento assíncrono
   - Adicionar dashboard para monitoramento de integrações
   - Expandir suporte para outros tipos de mídia
   - Implementar cache para melhorar performance
